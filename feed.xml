<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://dodooh.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://dodooh.github.io/" rel="alternate" type="text/html" /><updated>2025-05-18T04:02:50+00:00</updated><id>https://dodooh.github.io/feed.xml</id><title type="html">Blog</title><subtitle>A personal blog about technology, programming, and other interests</subtitle><author><name>Nghia Nguyen Tran Thanh</name><email>nghiantt.dng@gmail.com</email></author><entry><title type="html">React-Redux: #1 Setup</title><link href="https://dodooh.github.io/2025/05/11/react-redux-part1-setup/" rel="alternate" type="text/html" title="React-Redux: #1 Setup" /><published>2025-05-11T01:00:00+00:00</published><updated>2025-05-11T01:00:00+00:00</updated><id>https://dodooh.github.io/2025/05/11/react-redux-part1-setup</id><content type="html" xml:base="https://dodooh.github.io/2025/05/11/react-redux-part1-setup/"><![CDATA[<h1 id="module-1-foundation--project-setup">Module 1: Foundation &amp; Project Setup</h1>

<h2 id="learning-objectives">Learning Objectives</h2>
<p>By the end of this module, you will:</p>
<ul>
  <li>Set up a React Redux project from scratch</li>
  <li>Implement Redux store, actions, and reducers</li>
  <li>Create a product listing grid with React components</li>
  <li>Use React Redux hooks (useSelector, useDispatch)</li>
  <li>Establish the foundation for the ShopHub e-commerce platform</li>
</ul>

<h2 id="feature-requirements">Feature Requirements</h2>
<ul>
  <li>Initialize ShopHub project with React and Redux</li>
  <li>Create a responsive product display grid</li>
  <li>Implement Redux store with products reducer</li>
  <li>Display mock product data</li>
  <li>Set up project structure following repository guidelines</li>
</ul>

<h2 id="implementation-steps">Implementation Steps</h2>

<h3 id="step-1-project-initialization">Step 1: Project Initialization</h3>

<pre><code class="language-bash">npx create-react-app shophub
cd shophub
</code></pre>

<p>Create <code>package.json</code>:</p>

<pre><code class="language-json">{
  "name": "shophub",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@reduxjs/toolkit": "^1.9.7",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-redux": "^8.1.3",
    "react-router-dom": "^6.16.0",
    "react-scripts": "5.0.1",
    "redux": "^4.2.1",
    "web-vitals": "^2.1.4"
  },
  "devDependencies": {
    "@tailwindcss/aspect-ratio": "^0.4.2",
    "@tailwindcss/forms": "^0.5.7",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.52.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-jsx-a11y": "^6.8.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "postcss": "^8.4.31",
    "prettier": "^3.0.3",
    "tailwindcss": "^3.3.5"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "lint": "eslint src/",
    "lint:fix": "eslint src/ --fix",
    "format": "prettier --write src/"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      "&gt;0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
</code></pre>

<p>Install dependencies:</p>

<pre><code class="language-bash">npm install
</code></pre>

<h3 id="step-2-configure-tailwind-css">Step 2: Configure Tailwind CSS</h3>

<p>Create <code>tailwind.config.js</code>:</p>

<pre><code class="language-javascript">module.exports = {
  content: [
    "./src/**/*.{js,jsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f5f3ff',
          100: '#ede9fe',
          200: '#ddd6fe',
          300: '#c4b5fd',
          400: '#a78bfa',
          500: '#8b5cf6',
          600: '#7c3aed',
          700: '#6d28d9',
          800: '#5b21b6',
          900: '#4c1d95',
        },
        secondary: {
          50: '#fdf2f8',
          100: '#fce7f3',
          200: '#fbcfe8',
          300: '#f9a8d4',
          400: '#f472b6',
          500: '#ec4899',
          600: '#db2777',
          700: '#be185d',
          800: '#9d174d',
          900: '#831843',
        }
      },
      fontFamily: {
        'sans': ['Inter', 'system-ui', 'sans-serif'],
      },
      container: {
        center: true,
        padding: {
          DEFAULT: '1rem',
          sm: '2rem',
          lg: '4rem',
          xl: '5rem',
          '2xl': '6rem',
        },
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/aspect-ratio'),
  ],
}
</code></pre>

<p>Create <code>postcss.config.js</code>:</p>

<pre><code class="language-javascript">module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</code></pre>

<p>Update <code>src/index.css</code>:</p>

<pre><code class="language-css">@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&amp;display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;
</code></pre>

<h3 id="step-3-create-project-structure">Step 3: Create Project Structure</h3>

<pre><code class="language-bash">mkdir -p src/api
mkdir -p src/components/common
mkdir -p src/components/layout
mkdir -p src/components/features
mkdir -p src/pages
mkdir -p src/store/actions
mkdir -p src/store/reducers
mkdir -p src/store/selectors
mkdir -p src/store/middleware
mkdir -p src/hooks
mkdir -p src/utils
mkdir -p src/constants
mkdir -p src/styles
</code></pre>

<h3 id="step-4-configure-eslint">Step 4: Configure ESLint</h3>

<p>Create <code>.eslintrc.js</code>:</p>

<pre><code class="language-javascript">module.exports = {
  env: {
    browser: true,
    es2021: true,
    node: true,
    jest: true
  },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react-hooks/recommended',
    'plugin:jsx-a11y/recommended',
    'prettier'
  ],
  parserOptions: {
    ecmaFeatures: {
      jsx: true
    },
    ecmaVersion: 12,
    sourceType: 'module'
  },
  plugins: [
    'react',
    'react-hooks',
    'jsx-a11y'
  ],
  settings: {
    react: {
      version: 'detect'
    }
  },
  rules: {
    'react/prop-types': 'off',
    'react/react-in-jsx-scope': 'off',
    'react/display-name': 'off',
    'no-unused-vars': ['error', { 
      'argsIgnorePattern': '^_',
      'varsIgnorePattern': '^_'
    }],
    'react-hooks/rules-of-hooks': 'error',
    'react-hooks/exhaustive-deps': 'warn',
    'jsx-a11y/anchor-is-valid': 'warn',
    'no-console': ['warn', { 
      allow: ['warn', 'error'] 
    }],
    'prefer-const': 'error',
    'no-var': 'error',
    'arrow-body-style': ['error', 'as-needed'],
    'object-shorthand': 'error',
    'prefer-arrow-callback': 'error',
    'prefer-destructuring': ['error', {
      'array': true,
      'object': true
    }],
    'template-curly-spacing': ['error', 'never'],
  }
};
</code></pre>

<p>Create <code>.prettierrc</code>:</p>

<pre><code class="language-json">{
  "semi": true,
  "trailingComma": "all",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false,
  "jsxSingleQuote": false,
  "bracketSpacing": true,
  "jsxBracketSameLine": false,
  "arrowParens": "always",
  "endOfLine": "lf"
}
</code></pre>

<h3 id="step-5-create-mock-data-updated">Step 5: Create Mock Data (Updated)</h3>

<p>Create <code>src/api/mockData.js</code>:</p>

<pre><code class="language-javascript">export const mockProducts = [
  {
    id: 1,
    name: 'Wireless Headphones',
    price: 99.99,
    image: 'https://placehold.co/300x300',
    description: 'High-quality wireless headphones with noise cancellation',
    category: 'Electronics',
    stock: 50,
    rating: 4.5,
  },
  {
    id: 2,
    name: 'Running Shoes',
    price: 79.99,
    image: 'https://placehold.co/300x300',
    description: 'Comfortable running shoes for all terrains',
    category: 'Sports',
    stock: 30,
    rating: 4.2,
  },
  {
    id: 3,
    name: 'Coffee Maker',
    price: 149.99,
    image: 'https://placehold.co/300x300',
    description: 'Programmable coffee maker with thermal carafe',
    category: 'Home &amp; Kitchen',
    stock: 25,
    rating: 4.7,
  },
  {
    id: 4,
    name: 'Backpack',
    price: 49.99,
    image: 'https://placehold.co/300x300',
    description: 'Durable laptop backpack with multiple compartments',
    category: 'Accessories',
    stock: 40,
    rating: 4.3,
  },
  {
    id: 5,
    name: 'Smart Watch',
    price: 199.99,
    image: 'https://placehold.co/300x300',
    description: 'Fitness tracking smart watch with heart rate monitor',
    category: 'Electronics',
    stock: 15,
    rating: 4.6,
  },
  {
    id: 6,
    name: 'Yoga Mat',
    price: 29.99,
    image: 'https://placehold.co/300x300',
    description: 'Non-slip yoga mat with carrying strap',
    category: 'Sports',
    stock: 60,
    rating: 4.4,
  },
];
</code></pre>

<h3 id="step-6-create-redux-store">Step 6: Create Redux Store</h3>

<p>Create <code>src/store/actions/productActions.js</code>:</p>

<pre><code class="language-javascript">export const productActionTypes = {
  SET_PRODUCTS: 'SET_PRODUCTS',
};

export const setProducts = (products) =&gt; ({
  type: productActionTypes.SET_PRODUCTS,
  payload: products,
});
</code></pre>

<p>Create <code>src/store/reducers/productReducer.js</code>:</p>

<pre><code class="language-javascript">import { productActionTypes } from '../actions/productActions';

const initialState = {
  items: [],
};

const productReducer = (state = initialState, action) =&gt; {
  switch (action.type) {
    case productActionTypes.SET_PRODUCTS:
      return {
        ...state,
        items: action.payload,
      };
    default:
      return state;
  }
};

export default productReducer;
</code></pre>

<p>Create <code>src/store/reducers/index.js</code>:</p>

<pre><code class="language-javascript">import { combineReducers } from 'redux';
import productReducer from './productReducer';

const rootReducer = combineReducers({
  products: productReducer,
});

export default rootReducer;
</code></pre>

<p>Create <code>src/store/index.js</code>:</p>

<pre><code class="language-javascript">import { createStore } from 'redux';
import rootReducer from './reducers';

const store = createStore(
  rootReducer,
  window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()
);

export default store;
</code></pre>

<h3 id="step-7-create-layout-components">Step 7: Create Layout Components</h3>

<p>Create <code>src/components/layout/Header.js</code>:</p>

<pre><code class="language-javascript">const Header = () =&gt; (
  &lt;header className="bg-white shadow-sm"&gt;
    &lt;div className="container mx-auto px-4 py-4"&gt;
      &lt;div className="flex items-center justify-between"&gt;
        &lt;h1 className="text-2xl font-bold text-primary-600"&gt;ShopHub&lt;/h1&gt;
        &lt;nav&gt;
          &lt;ul className="flex space-x-6"&gt;
            &lt;li&gt;
              &lt;a href="/" className="text-gray-600 hover:text-primary-600"&gt;
                Home
              &lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;a href="/products" className="text-gray-600 hover:text-primary-600"&gt;
                Products
              &lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;a href="/cart" className="text-gray-600 hover:text-primary-600"&gt;
                Cart
              &lt;/a&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/nav&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/header&gt;
);

export default Header;
</code></pre>

<p>Create <code>src/components/layout/Layout.js</code>:</p>

<pre><code class="language-javascript">import Header from './Header';

const Layout = ({ children }) =&gt; (
  &lt;div className="min-h-screen bg-gray-50"&gt;
    &lt;Header /&gt;
    &lt;main className="container mx-auto px-4 py-8"&gt;
      {children}
    &lt;/main&gt;
  &lt;/div&gt;
);

export default Layout;
</code></pre>

<h3 id="step-8-create-product-components">Step 8: Create Product Components</h3>

<p>Create <code>src/components/features/ProductCard.js</code>:</p>

<pre><code class="language-javascript">const ProductCard = ({ product }) =&gt; (
  &lt;div className="bg-white rounded-lg shadow-md overflow-hidden"&gt;
    &lt;div className="aspect-w-1 aspect-h-1"&gt;
      &lt;img
        src={product.image}
        alt={product.name}
        className="w-full h-full object-cover"
      /&gt;
    &lt;/div&gt;
    &lt;div className="p-4"&gt;
      &lt;h3 className="text-lg font-semibold text-gray-900"&gt;{product.name}&lt;/h3&gt;
      &lt;p className="text-sm text-gray-500 mt-1"&gt;{product.category}&lt;/p&gt;
      &lt;p className="text-gray-600 mt-2 line-clamp-2"&gt;{product.description}&lt;/p&gt;
      &lt;div className="mt-4 flex items-center justify-between"&gt;
        &lt;span className="text-xl font-bold text-primary-600"&gt;
          ${product.price}
        &lt;/span&gt;
        &lt;button className="bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700 transition-colors"&gt;
          Add to Cart
        &lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
);

export default ProductCard;
</code></pre>

<p>Create <code>src/components/features/ProductGrid.js</code>:</p>

<pre><code class="language-javascript">import { useSelector } from 'react-redux';
import ProductCard from './ProductCard';

const ProductGrid = () =&gt; {
  const products = useSelector(state =&gt; state.products.items);

  return (
    &lt;div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6"&gt;
      {products.map(product =&gt; (
        &lt;ProductCard key={product.id} product={product} /&gt;
      ))}
    &lt;/div&gt;
  );
};

export default ProductGrid;
</code></pre>

<h3 id="step-9-create-pages">Step 9: Create Pages</h3>

<p>Create <code>src/pages/Home.js</code>:</p>

<pre><code class="language-javascript">import { useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { setProducts } from '../store/actions/productActions';
import { mockProducts } from '../api/mockData';
import ProductGrid from '../components/features/ProductGrid';

const Home = () =&gt; {
  const dispatch = useDispatch();

  useEffect(() =&gt; {
    dispatch(setProducts(mockProducts));
  }, [dispatch]);

  return (
    &lt;div&gt;
      &lt;h2 className="text-3xl font-bold text-gray-900 mb-8"&gt;Our Products&lt;/h2&gt;
      &lt;ProductGrid /&gt;
    &lt;/div&gt;
  );
};

export default Home;
</code></pre>

<h3 id="step-10-update-app-component">Step 10: Update App Component</h3>

<p>Update <code>src/App.js</code>:</p>

<pre><code class="language-javascript">import { Provider } from 'react-redux';
import store from './store';
import Layout from './components/layout/Layout';
import Home from './pages/Home';

function App() {
  return (
    &lt;Provider store={store}&gt;
      &lt;Layout&gt;
        &lt;Home /&gt;
      &lt;/Layout&gt;
    &lt;/Provider&gt;
  );
}

export default App;
</code></pre>

<h3 id="step-11-basic-tests">Step 11: Basic Tests</h3>

<p>Create <code>src/store/reducers/productReducer.test.js</code>:</p>

<pre><code class="language-javascript">import productReducer from './productReducer';
import { productActionTypes } from '../actions/productActions';

describe('productReducer', () =&gt; {
  it('should return initial state', () =&gt; {
    const state = productReducer(undefined, {});
    expect(state).toEqual({ items: [] });
  });

  it('should handle SET_PRODUCTS', () =&gt; {
    const mockProducts = [{ id: 1, name: 'Test Product' }];
    const action = {
      type: productActionTypes.SET_PRODUCTS,
      payload: mockProducts,
    };
    const state = productReducer(undefined, action);
    expect(state.items).toEqual(mockProducts);
  });
});
</code></pre>

<p>Create <code>src/components/features/ProductCard.test.js</code>:</p>

<pre><code class="language-javascript">import { render, screen } from '@testing-library/react';
import ProductCard from './ProductCard';

describe('ProductCard', () =&gt; {
  const mockProduct = {
    id: 1,
    name: 'Test Product',
    price: 99.99,
    image: 'test.jpg',
    description: 'Test description',
    category: 'Test Category',
  };

  it('renders product information', () =&gt; {
    render(&lt;ProductCard product={mockProduct} /&gt;);
    expect(screen.getByText('Test Product')).toBeInTheDocument();
    expect(screen.getByText('$99.99')).toBeInTheDocument();
    expect(screen.getByText('Test Category')).toBeInTheDocument();
  });
});
</code></pre>

<h2 id="running-the-application">Running the Application</h2>

<pre><code class="language-bash">npm start
</code></pre>

<h2 id="module-1-complete">Module 1 Complete</h2>

<p>You now have:</p>
<ul>
  <li>A functional React Redux project structure</li>
  <li>Redux store with products reducer</li>
  <li>Product listing with mock data</li>
  <li>Responsive grid layout using Tailwind CSS</li>
  <li>Basic testing setup</li>
</ul>

<h2 id="connection-to-module-2">Connection to Module 2</h2>

<p>In the next module, we’ll add:</p>
<ul>
  <li>Shopping cart functionality</li>
  <li>Redux actions for cart management</li>
  <li>More complex state interactions</li>
  <li>Component-level state management</li>
</ul>

<h2 id="exercises">Exercises</h2>

<ol>
  <li>Add a product rating display to the ProductCard component</li>
  <li>Create a loading state in the products reducer</li>
  <li>Implement product filtering by category</li>
  <li>Add a search bar component in the Header</li>
</ol>

<h2 id="additional-resources">Additional Resources</h2>

<ul>
  <li><a href="https://redux.js.org/">Redux Documentation</a></li>
  <li><a href="https://react-redux.js.org/api/hooks">React Redux Hooks</a></li>
  <li><a href="https://tailwindcss.com/docs">Tailwind CSS Documentation</a></li>
</ul>]]></content><author><name>Nghia Nguyen Tran Thanh</name><email>nghiantt.dng@gmail.com</email></author><category term="react" /><category term="redux" /><category term="frontend" /><summary type="html"><![CDATA[Module 1: Foundation &amp; Project Setup]]></summary></entry><entry><title type="html">React-Redux: #2 Cart</title><link href="https://dodooh.github.io/2025/05/11/react-redux-part2-cart/" rel="alternate" type="text/html" title="React-Redux: #2 Cart" /><published>2025-05-11T01:00:00+00:00</published><updated>2025-05-11T01:00:00+00:00</updated><id>https://dodooh.github.io/2025/05/11/react-redux-part2-cart</id><content type="html" xml:base="https://dodooh.github.io/2025/05/11/react-redux-part2-cart/"><![CDATA[<h2 id="module-2-state-management-basics---final-version">Module 2: State Management Basics - Final Version</h2>

<h3 id="learning-objectives">Learning Objectives</h3>

<p>By the end of this module, you’ll understand:</p>
<ul>
  <li>How to implement CRUD operations in Redux</li>
  <li>The distinction between component-level and application-level state</li>
  <li>Proper patterns for managing shopping cart state</li>
  <li>Action creator patterns and naming conventions</li>
  <li>Reducer composition techniques</li>
  <li>How to use Redux DevTools effectively</li>
  <li>Integration of React Router with Redux</li>
</ul>

<h3 id="feature-requirements">Feature Requirements</h3>

<p>We’ll build these features on top of our existing product grid:</p>
<ol>
  <li>Shopping cart with add/remove functionality</li>
  <li>Cart item quantity management (increment/decrement)</li>
  <li>Real-time cart total calculation</li>
  <li>Cart summary in the header</li>
  <li>Dedicated cart page with full cart management</li>
  <li>Navigation between pages using React Router</li>
</ol>

<h3 id="implementation-steps">Implementation Steps</h3>

<h4 id="step-1-install-required-dependencies">Step 1: Install Required Dependencies</h4>

<pre><code class="language-bash">npm install react-router-dom @heroicons/react
</code></pre>

<h4 id="step-2-cart-actions-and-action-types">Step 2: Cart Actions and Action Types</h4>

<p>Create <code>src/store/actions/cartActions.js</code>:</p>

<pre><code class="language-javascript">export const cartActionTypes = {
  ADD_TO_CART: 'ADD_TO_CART',
  REMOVE_FROM_CART: 'REMOVE_FROM_CART',
  UPDATE_QUANTITY: 'UPDATE_QUANTITY',
  CLEAR_CART: 'CLEAR_CART',
};

export const addToCart = (product) =&gt; ({
  type: cartActionTypes.ADD_TO_CART,
  payload: product,
});

export const removeFromCart = (productId) =&gt; ({
  type: cartActionTypes.REMOVE_FROM_CART,
  payload: productId,
});

export const updateQuantity = (productId, quantity) =&gt; ({
  type: cartActionTypes.UPDATE_QUANTITY,
  payload: { productId, quantity },
});

export const clearCart = () =&gt; ({
  type: cartActionTypes.CLEAR_CART,
});
</code></pre>

<h4 id="step-3-cart-reducer">Step 3: Cart Reducer</h4>

<p>Create <code>src/store/reducers/cartReducer.js</code>:</p>

<pre><code class="language-javascript">import { cartActionTypes } from '../actions/cartActions';

const initialState = {
  items: [],
  total: 0,
};

const calculateTotal = (items) =&gt; {
  return items.reduce((total, item) =&gt; total + item.price * item.quantity, 0);
};

const cartReducer = (state = initialState, action) =&gt; {
  switch (action.type) {
    case cartActionTypes.ADD_TO_CART: {
      const existingItemIndex = state.items.findIndex(
        (item) =&gt; item.id === action.payload.id
      );

      let updatedItems;
      if (existingItemIndex &gt;= 0) {
        updatedItems = state.items.map((item, index) =&gt;
          index === existingItemIndex
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      } else {
        updatedItems = [...state.items, { ...action.payload, quantity: 1 }];
      }

      return {
        ...state,
        items: updatedItems,
        total: calculateTotal(updatedItems),
      };
    }

    case cartActionTypes.REMOVE_FROM_CART: {
      const filteredItems = state.items.filter(
        (item) =&gt; item.id !== action.payload
      );
      return {
        ...state,
        items: filteredItems,
        total: calculateTotal(filteredItems),
      };
    }

    case cartActionTypes.UPDATE_QUANTITY: {
      const { productId, quantity } = action.payload;
      
      if (quantity === 0) {
        const filteredItems = state.items.filter(
          (item) =&gt; item.id !== productId
        );
        return {
          ...state,
          items: filteredItems,
          total: calculateTotal(filteredItems),
        };
      }

      const updatedItems = state.items.map((item) =&gt;
        item.id === productId ? { ...item, quantity } : item
      );

      return {
        ...state,
        items: updatedItems,
        total: calculateTotal(updatedItems),
      };
    }

    case cartActionTypes.CLEAR_CART:
      return initialState;

    default:
      return state;
  }
};

export default cartReducer;
</code></pre>

<h4 id="step-4-update-root-reducer">Step 4: Update Root Reducer</h4>

<p>Update <code>src/store/reducers/index.js</code>:</p>

<pre><code class="language-javascript">import { combineReducers } from 'redux';
import productReducer from './productReducer';
import cartReducer from './cartReducer';

const rootReducer = combineReducers({
  products: productReducer,
  cart: cartReducer,
});

export default rootReducer;
</code></pre>

<h4 id="step-5-update-appjs-with-react-router">Step 5: Update App.js with React Router</h4>

<p>Update <code>src/App.js</code>:</p>

<pre><code class="language-javascript">import { Provider } from 'react-redux';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import store from './store';
import Layout from './components/layout/Layout';
import Home from './pages/Home';
import Cart from './pages/Cart';

function App() {
  return (
    &lt;Provider store={store}&gt;
      &lt;Router&gt;
        &lt;Layout&gt;
          &lt;Routes&gt;
            &lt;Route path="/" element={&lt;Home /&gt;} /&gt;
            &lt;Route path="/cart" element={&lt;Cart /&gt;} /&gt;
          &lt;/Routes&gt;
        &lt;/Layout&gt;
      &lt;/Router&gt;
    &lt;/Provider&gt;
  );
}

export default App;
</code></pre>

<h4 id="step-6-update-productcard-with-cart-functionality">Step 6: Update ProductCard with Cart Functionality</h4>

<p>Update <code>src/components/features/ProductCard.js</code>:</p>

<pre><code class="language-javascript">import { useDispatch } from 'react-redux';
import { addToCart } from '../../store/actions/cartActions';

const ProductCard = ({ product }) =&gt; {
  const dispatch = useDispatch();
  
  const handleAddToCart = () =&gt; {
    dispatch(addToCart(product));
  };
  
  return (
    &lt;div className="bg-white rounded-lg shadow-md overflow-hidden"&gt;
      &lt;div className="aspect-w-1 aspect-h-1"&gt;
        &lt;img
          src={product.image}
          alt={product.name}
          className="w-full h-full object-cover"
        /&gt;
      &lt;/div&gt;
      &lt;div className="p-4"&gt;
        &lt;h3 className="text-lg font-semibold text-gray-900"&gt;{product.name}&lt;/h3&gt;
        &lt;p className="text-sm text-gray-500 mt-1"&gt;{product.category}&lt;/p&gt;
        &lt;p className="text-gray-600 mt-2 line-clamp-2"&gt;{product.description}&lt;/p&gt;
        &lt;div className="mt-4 flex items-center justify-between"&gt;
          &lt;span className="text-xl font-bold text-primary-600"&gt;
            ${product.price}
          &lt;/span&gt;
          &lt;button 
            onClick={handleAddToCart}
            className="bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700 transition-colors"
          &gt;
            Add to Cart
          &lt;/button&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default ProductCard;
</code></pre>

<h4 id="step-7-create-cartsummary-component">Step 7: Create CartSummary Component</h4>

<p>Create <code>src/components/features/cart/CartSummary.js</code>:</p>

<pre><code class="language-javascript">import { useSelector } from 'react-redux';
import { Link } from 'react-router-dom';
import { ShoppingCartIcon } from '@heroicons/react/24/outline';

const CartSummary = () =&gt; {
  const { items, total } = useSelector(state =&gt; state.cart);
  const itemCount = items.reduce((sum, item) =&gt; sum + item.quantity, 0);

  return (
    &lt;div className="relative"&gt;
      &lt;Link 
        to="/cart" 
        className="flex items-center text-gray-600 hover:text-primary-600"
      &gt;
        &lt;ShoppingCartIcon className="h-6 w-6" /&gt;
        &lt;span className="ml-2"&gt;${total.toFixed(2)}&lt;/span&gt;
        {itemCount &gt; 0 &amp;&amp; (
          &lt;span className="absolute -top-2 -right-2 bg-primary-600 text-white rounded-full h-5 w-5 flex items-center justify-center text-xs"&gt;
            {itemCount}
          &lt;/span&gt;
        )}
      &lt;/Link&gt;
    &lt;/div&gt;
  );
};

export default CartSummary;
</code></pre>

<h4 id="step-8-update-header-with-react-router">Step 8: Update Header with React Router</h4>

<p>Update <code>src/components/layout/Header.js</code>:</p>

<pre><code class="language-javascript">import { Link } from 'react-router-dom';
import CartSummary from '../features/cart/CartSummary';

const Header = () =&gt; (
  &lt;header className="bg-white shadow-sm"&gt;
    &lt;div className="container mx-auto px-4 py-4"&gt;
      &lt;div className="flex items-center justify-between"&gt;
        &lt;Link to="/" className="text-2xl font-bold text-primary-600"&gt;
          ShopHub
        &lt;/Link&gt;
        &lt;nav className="flex items-center space-x-6"&gt;
          &lt;ul className="flex space-x-6"&gt;
            &lt;li&gt;
              &lt;Link to="/" className="text-gray-600 hover:text-primary-600"&gt;
                Home
              &lt;/Link&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;Link to="/products" className="text-gray-600 hover:text-primary-600"&gt;
                Products
              &lt;/Link&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
          &lt;CartSummary /&gt;
        &lt;/nav&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/header&gt;
);

export default Header;
</code></pre>

<h4 id="step-9-create-cartitem-component">Step 9: Create CartItem Component</h4>

<p>Create <code>src/components/features/cart/CartItem.js</code>:</p>

<pre><code class="language-javascript">import { useDispatch } from 'react-redux';
import { removeFromCart, updateQuantity } from '../../../store/actions/cartActions';
import { MinusIcon, PlusIcon, TrashIcon } from '@heroicons/react/24/outline';

const CartItem = ({ item }) =&gt; {
  const dispatch = useDispatch();

  const handleQuantityChange = (newQuantity) =&gt; {
    if (newQuantity &gt;= 0) {
      dispatch(updateQuantity(item.id, newQuantity));
    }
  };

  const handleRemove = () =&gt; {
    dispatch(removeFromCart(item.id));
  };

  return (
    &lt;div className="flex items-center p-4 bg-white rounded-lg shadow-sm"&gt;
      &lt;img
        src={item.image}
        alt={item.name}
        className="w-20 h-20 object-cover rounded-md"
      /&gt;
      &lt;div className="ml-4 flex-1"&gt;
        &lt;h3 className="text-lg font-semibold text-gray-900"&gt;{item.name}&lt;/h3&gt;
        &lt;p className="text-gray-600"&gt;${item.price}&lt;/p&gt;
      &lt;/div&gt;
      &lt;div className="flex items-center space-x-4"&gt;
        &lt;div className="flex items-center border rounded-md"&gt;
          &lt;button
            onClick={() =&gt; handleQuantityChange(item.quantity - 1)}
            className="p-2 hover:bg-gray-100"
          &gt;
            &lt;MinusIcon className="h-4 w-4" /&gt;
          &lt;/button&gt;
          &lt;span className="px-4 py-2"&gt;{item.quantity}&lt;/span&gt;
          &lt;button
            onClick={() =&gt; handleQuantityChange(item.quantity + 1)}
            className="p-2 hover:bg-gray-100"
          &gt;
            &lt;PlusIcon className="h-4 w-4" /&gt;
          &lt;/button&gt;
        &lt;/div&gt;
        &lt;div className="text-lg font-semibold text-gray-900"&gt;
          ${(item.price * item.quantity).toFixed(2)}
        &lt;/div&gt;
        &lt;button
          onClick={handleRemove}
          className="p-2 text-red-600 hover:bg-red-50 rounded"
        &gt;
          &lt;TrashIcon className="h-5 w-5" /&gt;
        &lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default CartItem;
</code></pre>

<h4 id="step-10-create-cart-page">Step 10: Create Cart Page</h4>

<p>Create <code>src/pages/Cart.js</code>:</p>

<pre><code class="language-javascript">import { useSelector, useDispatch } from 'react-redux';
import { Link } from 'react-router-dom';
import CartItem from '../components/features/cart/CartItem';
import { clearCart } from '../store/actions/cartActions';

const Cart = () =&gt; {
  const dispatch = useDispatch();
  const { items, total } = useSelector(state =&gt; state.cart);

  const handleClearCart = () =&gt; {
    dispatch(clearCart());
  };

  if (items.length === 0) {
    return (
      &lt;div className="text-center py-12"&gt;
        &lt;h2 className="text-2xl font-semibold text-gray-900 mb-4"&gt;
          Your Cart is Empty
        &lt;/h2&gt;
        &lt;p className="text-gray-600 mb-8"&gt;
          Add some products to your cart to see them here.
        &lt;/p&gt;
        &lt;Link 
          to="/" 
          className="inline-block bg-primary-600 text-white px-6 py-3 rounded-md hover:bg-primary-700"
        &gt;
          Continue Shopping
        &lt;/Link&gt;
      &lt;/div&gt;
    );
  }

  return (
    &lt;div&gt;
      &lt;div className="flex justify-between items-center mb-8"&gt;
        &lt;h2 className="text-3xl font-bold text-gray-900"&gt;Shopping Cart&lt;/h2&gt;
        &lt;button
          onClick={handleClearCart}
          className="text-red-600 hover:text-red-700"
        &gt;
          Clear Cart
        &lt;/button&gt;
      &lt;/div&gt;
      
      &lt;div className="space-y-4 mb-8"&gt;
        {items.map(item =&gt; (
          &lt;CartItem key={item.id} item={item} /&gt;
        ))}
      &lt;/div&gt;
      
      &lt;div className="bg-white p-6 rounded-lg shadow-sm"&gt;
        &lt;div className="flex justify-between items-center text-xl font-semibold"&gt;
          &lt;span&gt;Total:&lt;/span&gt;
          &lt;span&gt;${total.toFixed(2)}&lt;/span&gt;
        &lt;/div&gt;
        &lt;button className="w-full mt-4 bg-primary-600 text-white py-3 rounded-md hover:bg-primary-700"&gt;
          Proceed to Checkout
        &lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default Cart;
</code></pre>

<h3 id="testing-requirements">Testing Requirements</h3>

<p>Create <code>src/store/reducers/cartReducer.test.js</code>:</p>

<pre><code class="language-javascript">import cartReducer from './cartReducer';
import { cartActionTypes } from '../actions/cartActions';

describe('cartReducer', () =&gt; {
  const initialState = {
    items: [],
    total: 0,
  };

  it('should return initial state', () =&gt; {
    expect(cartReducer(undefined, {})).toEqual(initialState);
  });

  it('should handle ADD_TO_CART for new item', () =&gt; {
    const product = { id: 1, name: 'Test Product', price: 10 };
    const action = {
      type: cartActionTypes.ADD_TO_CART,
      payload: product,
    };
    
    const newState = cartReducer(initialState, action);
    expect(newState.items).toHaveLength(1);
    expect(newState.items[0]).toEqual({ ...product, quantity: 1 });
    expect(newState.total).toBe(10);
  });

  it('should handle ADD_TO_CART for existing item', () =&gt; {
    const state = {
      items: [{ id: 1, name: 'Test Product', price: 10, quantity: 1 }],
      total: 10,
    };
    const action = {
      type: cartActionTypes.ADD_TO_CART,
      payload: { id: 1, name: 'Test Product', price: 10 },
    };
    
    const newState = cartReducer(state, action);
    expect(newState.items[0].quantity).toBe(2);
    expect(newState.total).toBe(20);
  });

  it('should handle REMOVE_FROM_CART', () =&gt; {
    const state = {
      items: [{ id: 1, name: 'Test Product', price: 10, quantity: 1 }],
      total: 10,
    };
    const action = {
      type: cartActionTypes.REMOVE_FROM_CART,
      payload: 1,
    };
    
    const newState = cartReducer(state, action);
    expect(newState.items).toHaveLength(0);
    expect(newState.total).toBe(0);
  });

  it('should handle UPDATE_QUANTITY', () =&gt; {
    const state = {
      items: [{ id: 1, name: 'Test Product', price: 10, quantity: 1 }],
      total: 10,
    };
    const action = {
      type: cartActionTypes.UPDATE_QUANTITY,
      payload: { productId: 1, quantity: 3 },
    };
    
    const newState = cartReducer(state, action);
    expect(newState.items[0].quantity).toBe(3);
    expect(newState.total).toBe(30);
  });

  it('should handle CLEAR_CART', () =&gt; {
    const state = {
      items: [
        { id: 1, name: 'Product 1', price: 10, quantity: 2 },
        { id: 2, name: 'Product 2', price: 20, quantity: 1 }
      ],
      total: 40,
    };
    const action = { type: cartActionTypes.CLEAR_CART };
    
    const newState = cartReducer(state, action);
    expect(newState).toEqual(initialState);
  });

  it('should remove item when quantity is updated to 0', () =&gt; {
    const state = {
      items: [{ id: 1, name: 'Test Product', price: 10, quantity: 1 }],
      total: 10,
    };
    const action = {
      type: cartActionTypes.UPDATE_QUANTITY,
      payload: { productId: 1, quantity: 0 },
    };
    
    const newState = cartReducer(state, action);
    expect(newState.items).toHaveLength(0);
    expect(newState.total).toBe(0);
  });
});
</code></pre>

<h3 id="project-structure-after-module-2">Project Structure After Module 2</h3>

<pre><code>src/
├── components/
│   ├── features/
│   │   ├── cart/
│   │   │   ├── CartItem.js
│   │   │   └── CartSummary.js
│   │   ├── ProductCard.js
│   │   └── ProductGrid.js
│   └── layout/
│       ├── Header.js
│       └── Layout.js
├── pages/
│   ├── Cart.js
│   └── Home.js
├── store/
│   ├── actions/
│   │   ├── cartActions.js
│   │   └── productActions.js
│   ├── reducers/
│   │   ├── cartReducer.js
│   │   ├── cartReducer.test.js
│   │   ├── productReducer.js
│   │   ├── productReducer.test.js
│   │   └── index.js
│   └── index.js
├── App.js
├── index.js
└── index.css
</code></pre>

<h3 id="connection-to-other-modules">Connection to Other Modules</h3>

<p><strong>From Module 1:</strong></p>
<ul>
  <li>Uses the existing product display structure</li>
  <li>Builds on the basic Redux setup</li>
  <li>Extends the mock product data</li>
</ul>

<p><strong>To Module 3:</strong></p>
<ul>
  <li>The synchronous cart actions prepare students for async patterns</li>
  <li>The reducer structure will be extended for loading/error states</li>
  <li>The cart functionality will integrate with API calls in Module 3</li>
</ul>

<h3 id="key-learning-points">Key Learning Points</h3>

<ol>
  <li><strong>State Shape Design</strong>: The cart state has a flat structure with calculated totals</li>
  <li><strong>Action Patterns</strong>: Consistent naming and payload structures</li>
  <li><strong>Reducer Logic</strong>: Pure functions with immutable updates</li>
  <li><strong>Derived State</strong>: Calculating totals from items rather than storing separately</li>
  <li><strong>Component Integration</strong>: Using <code>useSelector</code> and <code>useDispatch</code> hooks effectively</li>
  <li><strong>React Router Integration</strong>: Proper navigation between pages in a Redux app</li>
</ol>

<h3 id="exercises-for-students">Exercises for Students</h3>

<ol>
  <li>Add a “favorites” feature using similar Redux patterns</li>
  <li>Implement cart persistence using localStorage</li>
  <li>Add input validation for quantity updates</li>
  <li>Create a mini cart dropdown in the header</li>
  <li>Add unit tests for cart actions</li>
  <li>Add animation to cart item count updates</li>
  <li>Implement stock checking before adding to cart</li>
</ol>

<p>This module establishes the core Redux CRUD patterns that will be used throughout the rest of the course while introducing practical e-commerce functionality that students can relate to.</p>]]></content><author><name>Nghia Nguyen Tran Thanh</name><email>nghiantt.dng@gmail.com</email></author><category term="react" /><category term="redux" /><category term="frontend" /><summary type="html"><![CDATA[Module 2: State Management Basics - Final Version]]></summary></entry><entry><title type="html">DynamoDB Sync Tool: A Comprehensive Guide</title><link href="https://dodooh.github.io/2025/05/06/dynamodb-migration-script/" rel="alternate" type="text/html" title="DynamoDB Sync Tool: A Comprehensive Guide" /><published>2025-05-06T01:00:00+00:00</published><updated>2025-05-06T01:00:00+00:00</updated><id>https://dodooh.github.io/2025/05/06/dynamodb-migration-script</id><content type="html" xml:base="https://dodooh.github.io/2025/05/06/dynamodb-migration-script/"><![CDATA[<p>This guide explains how to use the DynamoDB Sync Tool to migrate data between AWS DynamoDB and local environments.</p>

<h2 id="quick-start">Quick Start</h2>

<pre><code class="language-bash">./dynamodb-sync.sh -h
</code></pre>

<p>Explore the arguments and usages</p>

<pre><code class="language-bash">./dynamodb-sync.sh --table users --pk user123
</code></pre>

<p>This command fetches items with partition key “user123” from the “users” table and imports them to your local DynamoDB
instance.</p>

<h2 id="core-parameters">Core Parameters</h2>

<table>
  <thead>
    <tr>
      <th>Parameter</th>
      <th>Description</th>
      <th>Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>--table, -t</code></td>
      <td>Source DynamoDB table name</td>
      <td>source_table</td>
    </tr>
    <tr>
      <td><code>--pk</code></td>
      <td>Partition key value (required for queries)</td>
      <td>-</td>
    </tr>
    <tr>
      <td><code>--operation, -o</code></td>
      <td>Operation type: query or scan</td>
      <td>query</td>
    </tr>
    <tr>
      <td><code>--region, -r</code></td>
      <td>AWS region</td>
      <td>ap-southeast-1</td>
    </tr>
    <tr>
      <td><code>--local-url, -l</code></td>
      <td>Local DynamoDB URL</td>
      <td>http://localhost:4569</td>
    </tr>
    <tr>
      <td><code>--local-table, -lt</code></td>
      <td>Local table name</td>
      <td>local_table</td>
    </tr>
  </tbody>
</table>

<h2 id="advanced-query-options">Advanced Query Options</h2>

<pre><code class="language-bash">./dynamodb-sync.sh \
  --table users \
  --pk user123 \
  --filter "age &gt; :age" \
  --attributes '{":age":{"N":"18"}}' \
  --index email-index \
  --projection "id, name, email"
</code></pre>

<p>This queries users with partition key “user123”, filters for age &gt; 18, uses the email-index, and selects only specified
attributes.</p>

<h2 id="table-scanning">Table Scanning</h2>

<p>For operations without a specific key:</p>

<pre><code class="language-bash">./dynamodb-sync.sh \
  --table users \
  --operation scan \
  --filter "status = :status" \
  --attributes '{":status":{"S":"active"}}' \
  --max-items 500
</code></pre>

<h2 id="export-or-import-only">Export or Import Only</h2>

<p>Export data without importing:</p>

<pre><code class="language-bash">./dynamodb-sync.sh --table users --pk user123 --export-only
</code></pre>

<p>Import previously exported files:</p>

<pre><code class="language-bash">./dynamodb-sync.sh --table users --context-id 20250506120000 --import-only
</code></pre>

<h2 id="batch-processing">Batch Processing</h2>

<p>Control batch size for large datasets:</p>

<pre><code class="language-bash">./dynamodb-sync.sh --table users --operation scan --max-items 2000
</code></pre>

<h2 id="prerequisites">Prerequisites</h2>

<ul>
  <li>AWS CLI installed and configured</li>
  <li>jq installed for JSON processing</li>
  <li>Running local DynamoDB instance</li>
  <li>Appropriate IAM permissions</li>
</ul>

<h2 id="common-use-cases">Common Use Cases</h2>

<ol>
  <li><strong>Development</strong>: Import real data for testing</li>
  <li><strong>Debugging</strong>: Reproduce issues with specific data patterns</li>
  <li><strong>Backups</strong>: Schedule exports via cron jobs</li>
  <li><strong>Analysis</strong>: Export filtered data subsets</li>
</ol>

<p>The tool automatically handles pagination, processes items in batches, and provides progress feedback during operation.</p>

<h2 id="download">Download</h2>

<ul>
  <li>Save the script as <a href="https://github.com/ntt-nghia/ntt-nghia.github.io/blob/master/resources/dynamodb-sync.sh">dynamodb-sync.sh</a>,</li>
  <li>Make it executable with <code>chmod +x dynamodb-sync.sh</code>, and you’re ready to go!</li>
</ul>]]></content><author><name>Nghia Nguyen Tran Thanh</name><email>nghiantt.dng@gmail.com</email></author><category term="aws" /><category term="dynamodb" /><category term="devops" /><category term="shell-scripting" /><summary type="html"><![CDATA[This guide explains how to use the DynamoDB Sync Tool to migrate data between AWS DynamoDB and local environments.]]></summary></entry><entry><title type="html">Welcome to My Blog</title><link href="https://dodooh.github.io/2025/04/12/welcome-to-my-blog/" rel="alternate" type="text/html" title="Welcome to My Blog" /><published>2025-04-12T05:00:00+00:00</published><updated>2025-04-12T05:00:00+00:00</updated><id>https://dodooh.github.io/2025/04/12/welcome-to-my-blog</id><content type="html" xml:base="https://dodooh.github.io/2025/04/12/welcome-to-my-blog/"><![CDATA[<p>This is my first blog post. I’m excited to share my thoughts, experiences, and knowledge with you through this platform.</p>

<h2 id="what-to-expect">What to Expect</h2>

<p>On this blog, I’ll be writing about:</p>

<ul>
  <li>Technology trends and insights</li>
  <li>Programming tutorials and tips</li>
  <li>Personal projects and experiments</li>
  <li>Book reviews and learning resources</li>
</ul>

<h2 id="code-examples">Code Examples</h2>

<p>Here’s a Kotlin configuration class:</p>

<pre><code class="language-kotlin">@EnableAsync
@Configuration
class AsyncConfiguration
</code></pre>

<p>Here’s a Java example:</p>

<pre><code class="language-java">public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
</code></pre>

<p>Here’s a Python example:</p>

<pre><code class="language-python">def greet(name):
    return f"Hello, {name}!"

print(greet("World"))
</code></pre>

<p>Here’s a JavaScript example:</p>

<pre><code class="language-javascript">function greet(name) {
    return `Hello, ${name}!`;
}

console.log(greet("World"));
</code></pre>

<h2 id="images">Images</h2>

<p>You can also include images in your posts:</p>

<p><img src="https://placehold.co/800x400" alt="Sample Image" /></p>

<h2 id="blockquotes">Blockquotes</h2>

<blockquote>
  <p>The best way to predict the future is to invent it.</p>

  <p>— Alan Kay</p>
</blockquote>

<h2 id="lists">Lists</h2>

<h3 id="unordered-list">Unordered List</h3>

<ul>
  <li>Item 1</li>
  <li>Item 2</li>
  <li>Item 3</li>
</ul>

<h3 id="ordered-list">Ordered List</h3>

<ol>
  <li>First item</li>
  <li>Second item</li>
  <li>Third item</li>
</ol>

<h2 id="tables">Tables</h2>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Age</th>
      <th>Occupation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>John Doe</td>
      <td>30</td>
      <td>Developer</td>
    </tr>
    <tr>
      <td>Jane Doe</td>
      <td>28</td>
      <td>Designer</td>
    </tr>
    <tr>
      <td>Bob Smith</td>
      <td>35</td>
      <td>Project Manager</td>
    </tr>
  </tbody>
</table>

<h2 id="mermaid-diagrams">Mermaid Diagrams</h2>

<p>Mermaid is a JavaScript-based diagramming and charting tool that renders Markdown-inspired text definitions to create diagrams.</p>

<h3 id="flowchart">Flowchart</h3>

<pre><code class="language-mermaid">graph TD
    A[Start] --&gt; B{Is it working?}
    B --&gt;|Yes| C[Great!]
    B --&gt;|No| D[Debug]
    D --&gt; B
</code></pre>

<h3 id="sequence-diagram">Sequence Diagram</h3>

<pre><code class="language-mermaid">sequenceDiagram
    participant Alice
    participant Bob
    Alice-&gt;&gt;John: Hello John, how are you?
    loop Healthcheck
        John-&gt;&gt;John: Fight against hypochondria
    end
    Note right of John: Rational thoughts &lt;br/&gt;prevail!
    John--&gt;&gt;Alice: Great!
    John-&gt;&gt;Bob: How about you?
    Bob--&gt;&gt;John: Jolly good!
</code></pre>

<h3 id="class-diagram">Class Diagram</h3>

<pre><code class="language-mermaid">classDiagram
    Animal &lt;|-- Duck
    Animal &lt;|-- Fish
    Animal &lt;|-- Zebra
    Animal : +int age
    Animal : +String gender
    Animal: +isMammal()
    Animal: +mate()
    class Duck{
        +String beakColor
        +swim()
        +quack()
    }
    class Fish{
        -int sizeInFeet
        -canEat()
    }
    class Zebra{
        +bool is_wild
        +run()
    }
</code></pre>

<h2 id="conclusion">Conclusion</h2>

<p>I hope you’ll find the content on this blog useful and engaging. Feel free to leave comments and share your thoughts!</p>

<p>Stay tuned for more posts coming soon.</p>]]></content><author><name>Nghia Nguyen Tran Thanh</name><email>nghiantt.dng@gmail.com</email></author><category term="introduction" /><category term="jekyll" /><category term="blogging" /><summary type="html"><![CDATA[This is my first blog post. I’m excited to share my thoughts, experiences, and knowledge with you through this platform.]]></summary></entry></feed>